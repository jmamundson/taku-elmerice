! seems to crash if bed gets too deep -- water pressure too high
check keywords warn
echo on
!
! working units are MPa, a, m
!
! THIS IS THE PARAMETER SPACE:
!-----------------------------
! the inflow velocity at X=0 in m/a
#U0 = 0.0

!-----------------------------
!
! derived parameter
! working units are MPa, a, m
!
#yearinsec = 365.25*24.0*60.0*60.0
#rhoi = 910.0/(1.0e6*yearinsec^2)
#rhow = 1030.0/(1.0e6*yearinsec^2)
#rhof = 1000.0/(1.0e6*yearinsec^2)

#gravity = -9.81*yearinsec^2

! sea level
#sl0 = 0.0

! the timestep
#dt = 10.0/365.25
#tspan = 1000.0
#tout = 1000.0 

! parameters for mass balance profile; using # to define LUA variables.
! B = dBdz * (z - 1/(2*k)*np.log(1 + np.exp(2*k*(z-zthreshold))))
#dBdz = 0.01 ! mass balance gradient {a^-1}
#Bmax = 5 ! maximum mass balance rate {m a^-1}
#ELA = 800 ! equilibrium line altitude {m}
#k = 0.005 ! smoothing parameter
#zthreshold = Bmax/dBdz+ELA
#Bsl = -8 ! mass balance rate at sea level {m a^-1}
    

! parameters needed for lateral friction; see Gagliardini et al. (2010)
#Afactor = 75.0 ! for 0 C  [MPa^{-3}a^{-1}]; see Cuffey and Paterson
#n = 3.0
#etai = 1.0/(2*Afactor)^(1.0/n)
#W = 2.5e3 ! half width [m]
#Kspring = etai * (n+1)^(1/n) / (rhoi * W^(1+(1/n)))

! parameters needed for Coulomb friction
#beta = 0.02
#As = beta^(-n)


$bed_func = "./bed/bed_gaussian"
$namerun = "spinup_gaussian" 

$ function tangentialupdate(X) import dt{\
   _tangentialupdate = X(0) + X(1) * dt;\
}

Header
  Mesh DB "." "mesh/mesh"
  Results Directory "./results/gaussian"
End

Constants
  Water Density = Real #rhow
  Rho = Real #rhoi
  g = Real #gravity
  Sea Level = Real #sl0

End

!---------------------------------------------------
!---------------- SIMULATION -----------------------
!---------------------------------------------------

Simulation
  Coordinate System  = Cartesian 2D
  Simulation Type = transient

  Timestepping Method = "bdf"
  BDF Order = 1
  Timestep Intervals = #tspan
  Output Intervals = #tout
  Timestep Sizes = #dt

  Initialize Dirichlet Conditions = Logical False
  Steady State Max Iterations = 1
  Steady State Min Iterations = 1

  Output File = "$namerun".result" !"
  max output level = 3

 End

!---------------------------------------------------
!---------------- BODIES ---------------------------
!---------------------------------------------------

! the ice
Body 1
  Name = "ice"
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

! The upper surface
Body 2
  Name= "top free surface"
  Equation = 2
  Material = 1
  Body Force = 2
  Initial Condition = 2
End

! the lower surface
Body 3
  Name= "free surface sea/ice-shelf"
  Equation = 3
  Material = 1
  Body Force = 3
  Initial Condition = 3
End

!---------------------------------------------------
!---------------- INITIAL CONDITIONS ---------------
!---------------------------------------------------
!! for ice
Initial Condition 1
  Pressure = Real 0.0
  Velocity 1 = Real 0.0
  Velocity 2 = Real 0.0
  Mesh Velocity 1 = Real 0.0
  Mesh Velocity 2 = Real 0.0
  Mesh Velocity 3 = Real 0.0
  Vert Mesh Update 1 = Real 0.0
  Vert Mesh Update 2 = Real 0.0

  Calving 1 = Real 0.0
  Calving 2 = Real 0.0
End

!! for top free surface
Initial Condition 2
  Zs Top = Equals Coordinate 2 !Variable Coordinate 1
    !Real Procedure "./"$bed_func" ""initsurface"
  Reference Zs Top = Equals Coordinate 2 !Variable Coordinate 1
    !Real Procedure "./"$bed_func" ""initsurface"
End

!! for free surface sea/ice-shelf
Initial Condition 3
  !Zs Bottom = Variable Coordinate 1
  !  Real Procedure "./"$bed_func" ""initbedrock"
  !Reference Zs Bottom = Variable Coordinate 1
  !  Real Procedure "./"$bed_func" ""initbedrock"
  !bedrock = Variable Coordinate 1
  !  Real Procedure "./"$bed_func" ""initbedrock"
End

!---------------------------------------------------
!---------------- BODY FORCES ----------------------
!---------------------------------------------------

Body Force 1
  !Vert Mesh Update 1 = Real 0.0
  
  ! Body forces are specified this way to allow for
  ! lateral drag; use above equations if removing
  ! lateral drag
  Flow BodyForce 1 = Variable Coordinate 1
     Real Procedure "ElmerIceUSF" "LateralFriction_x"
  Flow BodyForce 2 = Variable Coordinate 1
     Real Procedure "ElmerIceUSF" "LateralFriction_y"

  ! Also required for lateral drag
  Lateral Friction Gravity 1 = Real 0.0    
  Lateral Friction Gravity 2 = Real #gravity
  Lateral Friction Coefficient = Real #Kspring
  Lateral Friction Exponent = Real #1.0/n
  Flow Solver Name = String Flow Solution
  
End

!! accumulation flux in m/year
Body Force 2
   Zs Top Accumulation Flux 1 = Real 0.0e0
   Zs Top Accumulation Flux 2 = Variable Zs Top
    Real LUA "(dBdz*(tx[0] - 1/(2*k)*math.log(1 + math.exp(2*k*(tx[0]-zthreshold)))) + Bsl)"

   Balance Rate = Variable Zs Top ! added this to be able to output the balance rate
    Real LUA "(dBdz*(tx[0] - 1/(2*k)*math.log(1 + math.exp(2*k*(tx[0]-zthreshold)))) + Bsl)"

End

!! no melting/accretion under ice/shelf
Body Force 3
  !Zs Bottom Accumulation = Real 0.0e0
End

!---------------------------------------------------
!---------------- MATERIALS ------------------------
!---------------------------------------------------

!! ice material properties in MPa - m - a system
Material 1
  Density = Real #rhoi

  Viscosity Model = String "Glen"
  ! Viscosity has to be set to a dummy value
  ! to avoid warning output from Elmer
  Viscosity = Real 1.0
  Glen Exponent = Real 3.0
  Critical Shear Rate = Real 1.0e-10
  ! Rate factors (Paterson value in MPa^-3a^-1)
  ! old values
  !Rate Factor 1 = Real 1.258e13
  !Rate Factor 2 = Real 6.046e28
  !Rate Factor 1 = Real 9.120e12
  !Rate Factor 2 = Real 7.669e23

  ! these are in SI units - no problem, as long as
  ! the gas constant also is

  ! old values
  !Activation Energy 1 = Real 60e3
  !Activation Energy 2 = Real 139e3
  !Activation Energy 1 = Real 60e3
  !Activation Energy 2 = Real 115e3
  Set Arrhenius Factor = Logical True
  Arrhenius Factor = Real 75.0
  
  Glen Enhancement Factor = Real 1.0
  Constant Temperature = Real 0.0

  Sea Level = Real #sl0

  !Min Zs Top = Variable "Zs Bottom"
  !  Real MATC "tx + 10.0"
  !Max Zs Top = Real 1.0e6

  !! Bed condition
  ! Min Zs Bottom = Equals "bedrock"
  !Min Zs Bottom = Variable Coordinate 1
  !  Real Procedure "./"$bed_func" ""initbedrock"

  !Max Zs Bottom = Real 1.0e6
End

!---------------------------------------------------
!---------------- SOLVERS --------------------------
!---------------------------------------------------

Solver 1
  Equation = "Distance"
  Exec Solver = "Before Timestep"
  Procedure = "DistanceSolve" "DistanceSolver1"
  Variable = "Distance"

  Nonlinear System Max Iterations = 200
  Nonlinear System Convergence Tolerance = 1.0e-5

  Nonlinear System Relaxation Factor = 1
!  Distance Pseudo DT = Real 0.01

  Linear System Solver = Direct
  Linear System Direct Method = UMFPack
  Steady State Convergence Tolerance = 1.0e-4
End

Solver 2
  Exec Solver = "Never" !"Before Timestep"
  Equation = "bedrock update"
  Procedure = "./"$bed_func" ""getbedrock"
  Variable = -dofs 1 "bedrock"
End

Solver 3
   Equation = "Flowdepth"
   Exec Solver = "Before Timestep"
   Procedure = File "ElmerIceSolvers" "FlowDepthSolver"
   Variable = String "Depth"
   Variable DOFs = 1
   Linear System Solver = "Direct"
   Linear System Direct Method = "MUMPS"
   ! this sets the direction
   ! -1 is negative z-direction (upside down)
   ! +1 is positive (downside up)
   Gradient = Real -1.0E00
  ! switch that to True, if you want to have
  ! free surface gradients to be computed
  !------------------------------------
  Calc Free Surface = Logical False
  ! the name for the exported (if not existing) added variable
  ! the gradients will be stored in variables with the base
  ! name given and "Grad1" and (in 3 dimensions) "Grad2" added,
  ! so in our case "FreeSurfGrad1" and "FreeSurfGrad2"
  ! again, if those variables did not exist, they will be
  ! automatically created
  !-----------------------------------------------------------
  !Freesurf Name = String "FreeSurf"
End

Solver 4
   Equation = "Flowheight"
   Exec Solver = "Before Timestep"
   Procedure = File "ElmerIceSolvers" "FlowDepthSolver"
   Variable = String "Height"
   Variable DOFs = 1
   Linear System Solver = "Direct"
   Linear System Direct Method = "MUMPS"
   ! this sets the direction
   ! -1 is negative z-direction (upside down)
   ! +1 is positive (downside up)
   Gradient = Real 1.0E00
  ! switch that to True, if you want to have
  ! free surface gradients to be computed
  !------------------------------------
  Calc Free Surface = Logical False
  ! the name for the exported (if not existing) added variable
  ! the gradients will be stored in variables with the base
  ! name given and "Grad1" and (in 3 dimensions) "Grad2" added,
  ! so in our case "FreeSurfGrad1" and "FreeSurfGrad2"
  ! again, if those variables did not exist, they will be
  ! automatically created
  !-----------------------------------------------------------
  !Freesurf Name = String "FreeSurf"
End

Solver 5
  Equation = "NormalVector"
  Procedure = "ElmerIceSolvers" "ComputeNormalSolver"
  Exec Solver = "Before Timestep"
  Variable = String "Normal Vector"
  Variable DOFs = 2

  ComputeAll = Logical False
  Optimize Bandwidth = Logical False
End


Solver 6
  Equation = Fw
  Exec Solver = "Before Timestep"
  Procedure = "ElmerIceSolvers" "GetHydrostaticLoads"
  Variable = Fw[Fwater:2]
  Variable DOFs = 2
End


Solver 7
  Equation = "Navier-Stokes"

  Linear System Solver = Direct
  Linear System Direct Method = umfpack

  Nonlinear System Max Iterations = 50
  Nonlinear System Convergence Tolerance  = 1.0e-6
  Nonlinear System Newton After Iterations = 50
  Nonlinear System Newton After Tolerance = 1.0e-05
  Nonlinear System Relaxation Factor = 1.00
  Nonlinear System Reset Newton = Logical True

  Steady State Convergence Tolerance = Real 1.0e-4

  Stabilization Method = String Bubbles

  Exported Variable 1 = Flow Solution Loads[Stress Vector:2 CEQ Residual:1]
  Calculate Loads = Logical True

  Exported Variable 2 = Balance Rate

  Update Exported Variables = Logical True
  Nonlinear Update Exported Variables = Logical True

  Flow Model = String "Stokes"
End


Solver 8
  Equation = String "StressSolver"
  Procedure =  File "ElmerIceSolvers" "ComputeDevStress"
  Exec Solver = "After Timestep"
  ! this is just a dummy, hence no output is needed
  !-----------------------------------------------------------------------
  Variable = -nooutput "Sij"
  Variable DOFs = 1
  ! the name of the variable containing the flow solution (U,V,W,Pressure)
  !-----------------------------------------------------------------------
  Flow Solver Name = String "Flow Solution"
  Exported Variable 1 = "Stress" ! [Sxx, Syy, Szz, Sxy] in 2D
				 ! [Sxx, Syy, Szz, Sxy, Syz, Szx] in 3D
  Exported Variable 1 DOFs = 4   ! 4 in 2D, 6 in 3D
  Stress Variable Name = String "Stress"
  Linear System Solver = "Iterative"
  Linear System Iterative Method = "BiCGStab"
  Linear System Max Iterations = 300
  Linear System Convergence Tolerance = 1.0E-09
  Linear System Abort Not Converged = True
  Linear System Preconditioning = "ILU0"
  Linear System Residual Output = 1
End


Solver 9
  Equation = "Free Surface Top"
  Procedure =  "FreeSurfaceSolver" "FreeSurfaceSolver"
  Variable = "Zs Top"
  ALE Formulation = Logical True ! we can have a sideways moving mesh
  Variable DOFs =  1
  Exported Variable 1 = "Zs Top Residual"
  Exported Variable 1 DOFs = 1
  Exported Variable 2 = "Reference Zs Top"
  Exported Variable 2 DOFs = 1
  Before Linsolve = "EliminateDirichlet" "EliminateDirichlet"

  Linear System Solver = Iterative
  Linear System Direct Method = UMFPACK
  Linear System Max Iterations = 1500
  Linear System Iterative Method = BiCGStab
  Linear System Preconditioning = ILU0
  Linear System Convergence Tolerance = Real 1.0e-6
  Linear System Abort Not Converged = False
  Linear System Residual Output = 1

  Nonlinear System Max Iterations = 100
  Nonlinear System Convergence Tolerance  = 1.0e-5
  Nonlinear System Relaxation Factor = 1.00

  Steady State Convergence Tolerance = 1.0e-03

  Stabilization Method = Stabilized
  Apply Dirichlet = Logical True

  Relaxation Factor = Real 1.0
End

Solver 10
  Equation = "Free Surface Sea/Shelf"
  Exec Solver = "Never"
  Procedure =  "./prog/FreeSurfaceSolver1" "FreeSurfaceSolver"
  Variable = "Zs Bottom"
  Variable DOFS =  1
  Exported Variable 1 = "Zs Bottom Residual"
  Exported Variable 1 DOFs = 1
  Exported Variable 2 = "Reference Zs Bottom"
  Exported Variable 2 DOFs = 1
  ALE Formulation = Logical True ! we can have a sideways moving mesh
  Before Linsolve = "EliminateDirichlet" "EliminateDirichlet"

  Linear System Solver = Iterative
  Linear System Max Iterations = 1500
  Linear System Iterative Method = BiCGStab
  Linear System Preconditioning = ILU0
  Linear System Convergence Tolerance = Real 1.0e-6
  Linear System Abort Not Converged = False
  Linear System Residual Output = 1

  Nonlinear System Max Iterations = 100
  Nonlinear System Convergence Tolerance  = 1.0e-5
  Nonlinear System Relaxation Factor = 1.00

  Steady State Convergence Tolerance = 1.0e-03

  Stabilization Method = Stabilized
  Apply Dirichlet = Logical True

  Relaxation Factor = Real 1.0

End

Solver 11
  Equation = "Vert Mesh Update"
  Exec Solver = "After Timestep"
  Procedure =  File "./prog/MeshSolve1" "MeshSolver"
  Variable = "Vert Mesh Update"
  Variable DOFs = 2

  Linear System Solver = Iterative
  Linear System Max Iterations = 500
  Linear System Iterative Method = BiCGStab
  Linear System Preconditioning = ILU0
  Linear System Convergence Tolerance = Real 1.0e-6
  Steady State Convergence Tolerance = 1.0e-04
  Linear System Residual Output = 1
  Optimize Bandwidth = Logical False
End


Solver 12
  Equation = "ResultOutput"
  Procedure = File "ResultOutputSolve" "ResultOutputSolver"
  Exec Solver = "After Timestep"

  Output File Name  = File "$namerun"_" !"
  Vtu Format = logical true
  Binary Output = True
  Single Precision = True
  Save Geometry IDs = True
End

Solver 13
  Equation = "BalanceFlux"
  Procedure = File "./prog/sedTransport" "calc_Qb"
  Exec Solver = "After Timestep"

  Exported Variable 1 = "Xcoord"
  Exported Variable 1 DOFs = 1
End


!---------------------------------------------------
!---------------- EQUATIONS ------------------------
!---------------------------------------------------

Equation 1 ! for glacier bulk
  Active Solvers(8) = 1 3 4 5 7 8 11 12
End

Equation 2 ! for free surface
  Active Solvers(2) = 9 13
  Flow Solution Name = String "Flow Solution"
  Convection = String Computed
End

Equation 3 ! for bedrock surface
  Active Solvers(3) = 2 6 10
  Flow Solution Name = String "Flow Solution"
  Convection = String Computed
End

!---------------------------------------------------
!---------------- BOUNDARY CONDITIONS --------------
!---------------------------------------------------

!! BC  Bedrock + Shelf
Boundary Condition 1
  Name = "bottom"
  Target Boundaries = 1
  Body Id = 3
  Bottom Surface Mask = Logical True

  Normal-Tangential Velocity =  True
  Flow Force BC = Logical True

  !Normal-Tangential Vert Mesh Update = Logical True


  !! Parameters needed for the Coulomb Friction Law
  Friction Law Sliding Coefficient = Real #As
  Friction Law Post-Peak Exponent  = Real 1.0      
  Friction Law Maximum Value = Real 0.5           
  Friction Law PowerLaw Exponent = Real #n         
  Friction Law Linear Velocity = Real 1.0e-4

  Velocity 2 = Real 0.0
  Velocity 1 = Real 0.0 ! m/yr excavation, technically normal to the surface; make this something else to include excavation/deposition

  Vert Mesh Update 1 = Variable Velocity 1, "Vert Mesh Update 1"
     Real Lua "tx[1] + tx[0]*dt"
  Vert Mesh Update 2 = Variable Velocity 2, "Vert Mesh Update 2"
     Real Lua "tx[1] + tx[0]*dt"
  !Vert Mesh Update 1 = Variable "Vert Mesh Update 1"
  !   Real Lua "50*dt + tx[0]" 
  !Vert Mesh Update 2 = Real 0

  Height = Real 0.0

 
End

!! BC Glacier terminus
Boundary Condition 2
  Name = "front"
  Target Boundaries = 4
  Calving Front Mask = Logical True

  Flow Force BC = Logical True
  External Pressure = Variable Coordinate 2
     Real Procedure "ElmerIceUSF" "SeaPressure"

  Vert Mesh Update 1 = Real 0.0

  !Velocity 1 = Real 0.0

  Compute Sea Pressure = Logical True
  ComputeNormal = Logical True

  Distance = Real 0.0
End


!! BC  Free surface Top
Boundary Condition 3
  Name = "top"
  Target Boundaries = 2
  Body Id = 2
  Top Surface Mask = Logical True

  ! What do these lines do???
  Depth = Real 0.0
  ComputeNormal = Logical False
  Vert Mesh Update 2 = Variable Zs Top, Reference Zs Top
    Real Lua "tx[0] - tx[1]"
    !Real Procedure "ElmerIceUSF" "ZsTopMzsIniCalving"
  Vert Mesh Update 1 = Real 0.0

  !Front Displacement 2 = Variable Inity, Coordinate 2
  !  Real MATC "tx(1) - tx(0)"


  
  
End

!! BC Ice divide
Boundary Condition 4
  Name = "back"
  Target Boundaries = 3
  Velocity 1 = #U0
  !Long Mesh Update = Real 0.0
  Vert Mesh Update 1 = Real #U0*dt
  !Front Displacement 1 = Real 0.0
  !Front Displacement 2 = Real 0.0

  ComputeNormal = Logical False
End


